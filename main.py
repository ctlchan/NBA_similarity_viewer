"""
*******************************************************************************
main.py
*******************************************************************************

This is the main module of my final project. Run this module to see the final
product: a tkinter GUI of a graph generated by the data sets..

This file is provided solely for the submission of the final
project of CSC111 at the University of Toronto, St. George Campus.

This file is Copyright (c) 2021 Chris Chan
"""
import tkinter as tk
import python_ta
import create
import Player
from Player import Graph


def run_visual() -> None:
    """Build the graphs and then visualize it.

    Run this for the complete process and program."""
    graph = create.create_graph()
    graph.connect_graph()

    visualize_graph(graph)


class VisualizeGraph:
    """Create an interactive program which allows you to explore
    the player graph.

    Instance Attributes:
        - window: The tk.Tk object that is the window for the program
        - g: The graph being visualized
        - main_frame: The tk.Frame frame where the core search functionality exists
        - temp_frame: The tk.Frame frame where the details are displayed
        - entry: The tk.Entry object maintaining the search functionality
        - target: The tk.StringVar object tracking the neighbour of choice when exploring
                  similar players.
    """
    window: tk.Tk
    g: Player.Graph
    main_frame: tk.Frame
    temp_frame: tk.Frame
    entry: tk.Entry
    target: tk.StringVar

    def __init__(self, window: tk.Tk, g: Graph) -> None:
        """Initialize an instance of this tkinter program."""
        self.window = window
        self.g = g

        label = tk.Label(self.window, text='Enter a player name:')
        label.pack()

        self.main_frame = tk.Frame(self.window, width=200, height=25)
        self.main_frame.pack()
        self.temp_frame = tk.Frame(self.window, width=1000, height=350)
        self.temp_frame.pack()

        self.entry = tk.Entry(self.main_frame, width=50)
        self.entry.pack()

        tk.Button(self.main_frame, text='enter', command=self.click).pack()
        self.window.bind('<Return>', self.enter)

        self.target = tk.StringVar()

    def click(self) -> None:
        """Process a player search through the click of the 'enter' button."""
        self.wipe_frame()
        self.temp_frame = tk.Frame(self.window, width=1000, height=350)
        self.temp_frame.pack()

        player = self.entry.get()

        if player in self.g.get_all_vertices():
            info = self.g.get_info(player)
            tk.Label(self.temp_frame, text=info['name']).pack()
            tk.Label(self.temp_frame, text='Position: ' + info['position']).pack()
            tk.Label(self.temp_frame, text='Height: ' + str(info['height']) + ' in.').pack()
            tk.Label(self.temp_frame, text='Weight: ' + str(info['weight']) + ' lbs.').pack()

            keys = self.g.get_stats(player).keys()
            stats = self.g.get_stats(player).values()
            stats = [str(round(x, 2)) for x in stats]
            tk.Label(self.temp_frame, text=' '.join(keys)).pack()
            tk.Label(self.temp_frame, text='   '.join(stats)).pack()

            tk.Label(self.temp_frame, text='Similar Players').pack()
            for other in self.g.get_neighbours(player):
                tk.Radiobutton(self.temp_frame, text=other, variable=self.target, value=other,
                               command=self.select_other).pack()

    def enter(self, event: tk.Event) -> None:
        """Process a player search through the press of the Return key on the keyboard."""
        self.wipe_frame()
        self.temp_frame = tk.Frame(self.window, width=1000, height=350)
        self.temp_frame.pack()

        player = self.entry.get()

        if player in self.g.get_all_vertices():
            info = self.g.get_info(player)
            tk.Label(self.temp_frame, text=info['name']).pack()
            tk.Label(self.temp_frame, text='Position: ' + info['position']).pack()
            tk.Label(self.temp_frame, text='Height: ' + str(info['height']) + ' in.').pack()
            tk.Label(self.temp_frame, text='Weight: ' + str(info['weight']) + ' lbs.').pack()

            keys = self.g.get_stats(player).keys()
            stats = self.g.get_stats(player).values()
            stats = [str(round(x, 2)) for x in stats]
            tk.Label(self.temp_frame, text=' '.join(keys)).pack()
            tk.Label(self.temp_frame, text='   '.join(stats)).pack()

            tk.Label(self.temp_frame, text='Similar Players').pack()
            for other in self.g.get_neighbours(player):
                tk.Radiobutton(self.temp_frame, text=other, variable=self.target, value=other,
                               command=self.select_other).pack()

    def select_other(self) -> None:
        """Process a player search through the selection of a similar player."""
        self.wipe_frame()
        self.temp_frame = tk.Frame(self.window, width=1000, height=350)
        self.temp_frame.pack()

        player = self.target.get()

        if player in self.g.get_all_vertices():
            info = self.g.get_info(player)
            tk.Label(self.temp_frame, text=info['name']).pack()
            tk.Label(self.temp_frame, text='Position: ' + info['position']).pack()
            tk.Label(self.temp_frame, text='Height: ' + str(info['height']) + ' in.').pack()
            tk.Label(self.temp_frame, text='Weight: ' + str(info['weight']) + ' lbs.').pack()

            keys = self.g.get_stats(player).keys()
            stats = self.g.get_stats(player).values()
            stats = [str(round(x, 2)) for x in stats]
            tk.Label(self.temp_frame, text=' '.join(keys)).pack()
            tk.Label(self.temp_frame, text='   '.join(stats)).pack()
            tk.Label(self.temp_frame, text='Similar Players').pack()
            for other in self.g.get_neighbours(player):
                tk.Radiobutton(self.temp_frame, text=other, variable=self.target, value=other,
                               command=self.select_other).pack()

    def wipe_frame(self) -> None:
        """Remove temp_frame to clear the screen."""
        self.temp_frame.destroy()


def visualize_graph(g: Graph) -> None:
    """Open a GUI where users can explore the graph and its connections."""
    root = tk.Tk()
    root.title('Player Graph GUI')
    root.geometry('1200x800')

    _ = VisualizeGraph(root, g)

    root.mainloop()


python_ta.check_all(config={
    'extra-imports': ['create', 'Player', 'tkinter'],
    'allowed-io': [],
    'max-line-length': 100,
    'disable': ['E1136']
})
